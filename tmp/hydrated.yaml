---
# Source: metaflow/templates/metaflow-service-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: myapp-metaflow
  namespace: default
  labels:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/name: "name"
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/revision: "1"
---
# Source: metaflow/templates/kubegres-pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: myapp-kubegres-pv 
  namespace: default
  labels:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/name: "name"
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/revision: "1"
spec:
  storageClassName: standard
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /var/lib/backup
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    name: myapp-kubegres-pvc
    namespace: default
  persistentVolumeReclaimPolicy: Delete
---
# Source: metaflow/templates/kubegres-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myapp-kubegres-pvc
  namespace: default
  labels:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/name: "name"
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/revision: "1"
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
  selector:
    matchLabels:
      helm.sh/chart: metaflow-0.0.1
      app.kubernetes.io/name: "name"
      app.kubernetes.io/instance: myapp
      app.kubernetes.io/managed-by: Helm
  storageClassName: standard
---
# Source: metaflow/templates/metaflow-service-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: metaflow-svc
  namespace: default
  labels:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/name: "name"
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/revision: "1"
spec:
  type: ClusterIP
  ports:
    - name: metadata
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: upgrades
      port: 8082
      protocol: TCP
      targetPort: 8082
  selector:
    app.kubernetes.io/name: "name"
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/managed-by: Helm
---
# Source: metaflow/templates/metaflow-service-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metaflow
  namespace: default
  labels:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/name: "name"
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/revision: "1"
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/name: "name"
      app.kubernetes.io/instance: myapp
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      annotations:
        {}
      labels:
        app.kubernetes.io/name: "name"
        app.kubernetes.io/instance: myapp
        app.kubernetes.io/managed-by: Helm
    spec:
      imagePullSecrets:
        null
      securityContext:
        {}
      initContainers:
        - name: db-migrations
          image: "netflixoss/metaflow_metadata_service:latest"
          command:
          - "/opt/latest/bin/python3"
          - "/root/run_goose.py"
          - "--only-if-empty-db"
          env:
            - name: MF_METADATA_DB_NAME
              value: postgres
            - name: MF_METADATA_DB_PORT
              value: "5432"
            - name: MF_METADATA_DB_PSWD
              valueFrom:
                secretKeyRef:
                  name: kubegres-secret
                  key: superUserPassword
            - name: MF_METADATA_DB_USER
              value: postgres
            - name: MF_METADATA_DB_HOST
              value: metaflow.default.svc.cluster.local
      containers:
        - name: metaflow
          securityContext:
            {}
          image: "netflixoss/metaflow_metadata_service:latest"
          command: ["/opt/latest/bin/python3", "-m", "services.metadata_service.server" ]
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ping
              port: http
          readinessProbe:
            httpGet:
              path: /ping
              port: http
          resources:
            null
          envFrom:
            null
          env:
            - name: MF_METADATA_DB_NAME
              value: postgres
            - name: MF_METADATA_DB_PORT
              value: "5432"
            - name: MF_METADATA_DB_PSWD
              valueFrom:
                secretKeyRef:
                  name: kubegres-secret
                  key: superUserPassword
            - name: MF_METADATA_DB_USER
              value: postgres
            - name: MF_METADATA_DB_HOST
              value: metaflow.default.svc.cluster.local
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
---
# Source: metaflow/templates/kubegres.yaml
apiVersion: kubegres.reactive-tech.io/v1
kind: Kubegres
metadata:
  name: metaflow
  namespace: default
  labels:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/name: "name"
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/chart: metaflow-0.0.1
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/revision: "1"
  
spec:
  replicas: 3
  image: "postgres:14.1"
  port: 5432
  database:
    size: 50Mi
    storageClassName: standard
    volumeMount: /var/lib/postgres/data
  
  failover:
    isDisabled: false
    
  backup:
    pvcName: myapp-kubegres-pvc
    schedule: 0 0 1 */1 *
    volumeMount: /var/lib/backup
  env:
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: "kubegres-secret"
          key: superUserPassword
    - name: POSTGRES_REPLICATION_PASSWORD
      valueFrom:
        secretKeyRef:
          name: "kubegres-secret"
          key: replicationUserPassword
    - name: POSTGRES_DB
      value: postgres
    - name: POSTGRES_USER
      value: postgres
